{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","numOfWords","letters","results","bannedWords","handleClick","bind","calculatePossibilities","calculateSentences","findWords","findPossibleWords","axios","res","wordlist","data","split","map","w","toLowerCase","this","setState","wordlistFreq","wordToFreq","wordlistLen","length","word","replace","obj","char","a","b","k","wordFreq","testFreq","freq","i","indexOf","isWordPossible","includes","push","sentenceLengths","result","sentence","remainingFreq","subtractFreqs","flat","className","placeholder","onChange","v","target","value","x","Number","onClick","filter","w1","removeBannedWord","key","concat","addBannedWord","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1f301fcf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\n// wordlist from https://raw.githubusercontent.com/first20hours/google-10000-english/master/google-10000-english-no-swears.txt\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { numOfWords: [6, 4, 2, 6], letters: 'NEHSCOIAEPOWIHAFIF', results: [], bannedWords: [] };\n\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t\tthis.calculatePossibilities = this.calculateSentences.bind(this);\n\t\tthis.findWords = this.findPossibleWords.bind(this);\n\t}\n\n\tasync componentDidMount() {\n\t\tconst res = await axios('word-list.txt');\n\t\tconst wordlist = res.data.split('\\n').map(w => w.toLowerCase());\n\t\tthis.setState({\n\t\t\twordlist,\n\t\t\twordlistFreq: wordlist.map(this.wordToFreq),\n\t\t\twordlistLen: wordlist.map(w => w.length)\n\t\t});\n\t}\n\n\n\twordToFreq(word) {\n\t\tword = word.replace(/ /g, '');\n\t\tconst obj = {};\n\t\tfor (const char of word.split(''))\n\t\t\tobj[char] = (obj[char] || 0) + 1;\n\t\treturn obj;\n\t}\n\n\tsubtractFreqs(a, b) {\n\t\tconst res = { ...a };\n\t\tfor (const k in b)\n\t\t\tif (res[k])\n\t\t\t\tres[k] -= b[k];\n\t\treturn res;\n\t}\n\n\tisWordPossible(wordFreq, testFreq) {\n\t\tfor (const k in wordFreq)\n\t\t\tif (!testFreq[k] || wordFreq[k] > testFreq[k])\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfindPossibleWords(freq, length) {\n\t\tconst res = [];\n\t\tlet i = this.state.wordlistLen.indexOf(length);\n\t\twhile (i !== -1) {\n\t\t\tif (this.isWordPossible(this.state.wordlistFreq[i], freq) && !this.state.bannedWords.includes(this.state.wordlist[i])) {\n\t\t\t\tres.push(this.state.wordlist[i]);\n\t\t\t}\n\t\t\ti = this.state.wordlistLen.indexOf(length, i + 1);\n\t\t}\n\t\treturn res;\n\t}\n\n\tasync calculateSentences(letters, sentenceLengths) {\n\t\tconst freq = this.wordToFreq(letters.toLowerCase());\n\t\tlet result = this.findPossibleWords(freq, sentenceLengths[0]);\n\t\tfor (let i = 1; i < sentenceLengths.length; i++) {\n\t\t\tresult = result.map(sentence => {\n\t\t\t\tconst remainingFreq = this.subtractFreqs(freq, this.wordToFreq(sentence));\n\t\t\t\tconst possibleWords = this.findPossibleWords(remainingFreq, sentenceLengths[i]);\n\t\t\t\treturn possibleWords.map(word => sentence + ' ' + word);\n\t\t\t}).flat();\n\t\t}\n\t\treturn result;\n\t};\n\n\tasync handleClick() {\n\t\tconst res = await this.calculateSentences(this.state.letters, this.state.numOfWords);\n\t\tthis.setState({ results: res });\n\t}\n\n\trender() {\n\t\tconst removeBannedWord = w => this.setState({ bannedWords: this.state.bannedWords.filter(w1 => w1 !== w) });\n\t\tconst addBannedWord = w => !this.state.bannedWords.includes(w) && this.setState({ bannedWords: this.state.bannedWords.concat(w) });\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"input-container\">\n\t\t\t\t\t<div className=\"input-title\">Letters:</div>\n\t\t\t\t\t<input placeholder=\"NEHSCOIAEPOWIHAFIF\" className=\"input-input\" onChange={v => this.setState({ letters: v.target.value })}></input>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"input-container\">\n\t\t\t\t\t<div className=\"input-title\">Word Lengths:</div>\n\t\t\t\t\t<input placeholder=\"6 4 2 6\" className=\"input-input\" onChange={v => this.setState({ numOfWords: v.target.value.split(' ').map(x => Number(x)) })}></input>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"input-container\">\n\t\t\t\t\t<div className=\"input-title\">Banned words:</div>\n\t\t\t\t\t<div className=\"banned-word-list\">{this.state.bannedWords.map(w => <div className=\"word-container add\" onClick={() => removeBannedWord(w)}>{w}</div>)}</div>\n\t\t\t\t</div>\n\n\t\t\t\t<button onClick={this.handleClick}>Unscrable Sentence</button>\n\n\t\t\t\t<div className=\"results-container\">\n\t\t\t\t\t{this.state.results.map(x => {\n\t\t\t\t\t\tconst wordlist = x.split(' ');\n\t\t\t\t\t\treturn <div className=\"sentence-container\" key={x}>\n\t\t\t\t\t\t\t{wordlist.map(w => <div key={w} className=\"word-container remove\" onClick={() => addBannedWord(w)}>{w}</div>)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}